import streamlit as st
import sqlite3
import hashlib
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import google.generativeai as genai
from datetime import datetime, timedelta
import time

# --- 1. FUNCIONES DE SEGURIDAD Y BASE DE DATOS DE LOGIN ---
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()
conn = sqlite3.connect('data.db', check_same_thread=False) 
c = conn.cursor()
def create_usertable():
    c.execute('CREATE TABLE IF NOT EXISTS userstable(username TEXT, password TEXT)')
def login_user(username, password):
    c.execute('SELECT * FROM userstable WHERE username =? AND password = ?', (username, password))
    return c.fetchall()

# --- 2. FUNCIONES DE LA APLICACI√ìN (GOOGLE SHEETS & GEMINI) ---
# --- Funciones de Carga de Datos (Tu c√≥digo original + la nueva para el plan semanal) ---
def cargar_perfil(client, username):
    try:
        spreadsheet = client.open("AI.TRAIN-U")
        sheet_perfil = spreadsheet.worksheet("Perfil")
        data = sheet_perfil.get_all_records()
        df = pd.DataFrame(data)
        df_usuario = df[df['UserID'] == username]
        if df_usuario.empty:
            return {"Error": "No se encontr√≥ un perfil para este usuario en la hoja 'Perfil'."}
        perfil_dict = {row['Variable']: row['Valor'] for index, row in df_usuario.iterrows()}
        return perfil_dict
    except Exception as e:
        return {"Error": f"Ocurri√≥ un error al cargar el perfil: {e}"}

def cargar_historial(client, username):
    try:
        spreadsheet = client.open("AI.TRAIN-U")
        sheet_registro = spreadsheet.worksheet("Registro_Diario")
        data = sheet_registro.get_all_records()
        df = pd.DataFrame(data)
        df_usuario = df[df['UserID'] == username]
        return df_usuario
    except Exception:
        return pd.DataFrame()

def cargar_plan_semana(client, username):
    """(NUEVA) Carga el plan de la semana actual para un usuario."""
    try:
        sheet = client.open("AI.TRAIN-U").worksheet("Plan_Semanal")
        data = sheet.get_all_records()
        if not data: return None
        df = pd.DataFrame(data)
        today = datetime.today()
        lunes_actual = (today - timedelta(days=today.weekday())).strftime('%d/%m/%Y')
        df_semana = df[(df['UserID'] == username) & (df['Semana_Del'] == lunes_actual)]
        if df_semana.empty:
            return None
        return df_semana.iloc[0].to_dict()
    except Exception:
        return None

# --- Funciones de Guardado/Actualizaci√≥n de Datos ---
def guardar_registro(client, username, nueva_fila_datos):
    spreadsheet = client.open("AI.TRAIN-U")
    sheet_registro = spreadsheet.worksheet("Registro_Diario")
    fila_completa = [username] + nueva_fila_datos
    sheet_registro.append_row(fila_completa)
    
def guardar_plan_semanal_nuevo(client, username, plan_generado_str):
    """Guarda un plan semanal reci√©n creado, rellenando correctamente todas las columnas."""
    try:
        sheet = client.open("AI.TRAIN-U").worksheet("Plan_Semanal")
        today = datetime.today()
        lunes_actual = (today - timedelta(days=today.weekday())).strftime('%d/%m/%Y')
        dias = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
        
        # Preparamos la nueva fila para el Google Sheet. Columnas: UserID, Semana_Del
        nueva_fila = [username, lunes_actual]
        
        # Limpiamos la respuesta de la IA por si a√±ade espacios o l√≠neas en blanco.
        planes_diarios_limpios = [linea.strip() for linea in plan_generado_str.strip().split('\n')]
        
        # Creamos un diccionario para acceder f√°cilmente al plan de cada d√≠a
        # ej: {'Lunes': 'Empuje...', 'Martes': 'Tir√≥n...'}
        planes_por_dia = {}
        for linea in planes_diarios_limpios:
            if ':' in linea:
                partes = linea.split(':', 1)
                dia_semana = partes[0].strip()
                plan_desc = partes[1].strip()
                if dia_semana in dias:
                    planes_por_dia[dia_semana] = plan_desc
        
        # Rellenamos las columnas del Sheet con los datos del diccionario
        for dia in dias:
            plan_del_dia = planes_por_dia.get(dia, "Descanso") # Usamos .get para obtener el plan o 'Descanso' si no lo encuentra
            # A√±adimos el Plan del d√≠a y su estado inicial ("Pendiente")
            nueva_fila.extend([plan_del_dia, "Pendiente"])
            
        # Al final, a√±adimos el texto original completo y legible
        nueva_fila.append(plan_generado_str.strip())
        
        sheet.append_row(nueva_fila)
        st.success("Plan semanal guardado correctamente en la base de datos.")

    except Exception as e:
        st.error(f"Ocurri√≥ un error cr√≠tico al guardar el nuevo plan semanal: {e}")
    except Exception as e:
        st.error(f"Ocurri√≥ un error cr√≠tico al guardar el nuevo plan semanal: {e}")
        
# (NUEVA Y MEJORADA) Esta funci√≥n actualiza tanto el plan como el estado
def actualizar_plan_completo(client, username, dia, nuevo_plan, nuevo_estado):
    try:
        sheet = client.open("AI.TRAIN-U").worksheet("Plan_Semanal")
        # ... (l√≥gica para encontrar la fila del usuario, igual que antes) ...
        
        if fila_usuario != -1:
            # Encontrar las columnas para el plan y el estado de ese d√≠a
            columna_plan = 3 + (dias_semana.index(dia) * 2)
            columna_estado = columna_plan + 1
            
            # Actualizar ambas celdas
            sheet.update_cell(fila_usuario, columna_plan, nuevo_plan)
            sheet.update_cell(fila_usuario, columna_estado, nuevo_estado)
    except Exception as e:
        st.warning(f"No se pudo actualizar el plan semanal: {e}")


# --- Funciones de IA (Con las nuevas modificaciones) ---
def generar_plan_semanal(perfil, historial_mes_str):
    """Genera la estructura de entrenamiento para 7 d√≠as con un formato estricto."""
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = f"""
    Eres un planificador de fitness. Basado en el perfil del usuario, genera una estructura de entrenamiento para los 7 d√≠as de la semana.

    Perfil: {perfil}
    Historial del √∫ltimo mes: {historial_mes_str}

    **TU TAREA:**
    Genera una estructura de entrenamiento para los 7 d√≠as de la semana.

    **FORMATO OBLIGATORIO:**
    Debes responder con EXACTAMENTE 7 l√≠neas.
    Cada l√≠nea DEBE empezar con el nombre del d√≠a de la semana (Lunes, Martes, Mi√©rcoles, Jueves, Viernes, S√°bado, Domingo), seguido de dos puntos y el plan.
    NO incluyas ninguna otra palabra, saludo o explicaci√≥n antes o despu√©s de las 7 l√≠neas.
    NO uses la palabra gen√©rica 'D√≠a'. Usa el nombre espec√≠fico de cada d√≠a de la semana.

    **EJEMPLO DE RESPUESTA PERFECTA:**
    Lunes: Empuje (Pecho, Hombro, Tr√≠ceps)
    Martes: Tir√≥n (Espalda, B√≠ceps)
    Mi√©rcoles: Pierna (Cu√°driceps, Femoral)
    Jueves: Cardio y Abdominales
    Viernes: Empuje (Enfoque Hombro)
    S√°bado: Tir√≥n (Enfoque Espalda)
    Domingo: Descanso total
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Error al generar el plan semanal: {e}")
        return None

# (MODIFICADA) La IA ahora tambi√©n puede sugerir una re-planificaci√≥n
def generar_plan_diario(perfil, historial_str, datos_hoy, plan_semanal_actual):
    model = genai.GenerativeModel('gemini-1.5-flash')
    
    # --- (NUEVO) A√ëADIMOS LAS L√çNEAS QUE FALTABAN ---
    dias_semana = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
    dia_manana_idx = (datetime.today().weekday() + 1) % 7
    dia_manana_nombre = dias_semana[dia_manana_idx]
    lo_que_toca_manana = plan_semanal_actual.get(f"{dia_manana_nombre}_Plan", "D√≠a libre")
    # --------------------------------------------------

    prompt = f"""
    Eres un entrenador personal adaptativo. Tu objetivo es crear un plan DETALLADO para ma√±ana y, si es necesario, re-planificar el resto de la semana.

    **CONTEXTO ESTRAT√âGICO:**
    - El plan original para la semana es: {plan_semanal_actual.get('Plan_Original_Completo', '')}
    - Ma√±ana es {dia_manana_nombre} y el plan dice que toca: **{lo_que_toca_manana}**.

    **REALIDAD (HOY):**
    - Perfil: {perfil}
    - Historial reciente: {historial_str}
    - Datos de hoy: {datos_hoy}

    **TU TAREA:**
    1. **Analiza el entrenamiento de hoy.** Compara lo que hice (`{datos_hoy['entreno']}`) con lo que estaba planeado.
    2. **Crea el plan detallado para ma√±ana.** Ad√°ptalo si mis sensaciones de hoy lo requieren (dolor, cansancio).
    3. **(IMPORTANTE) Re-planifica si es necesario.** Si el entrenamiento de hoy fue muy diferente a lo planeado (ej: hice pierna cuando tocaba pecho), el resto de la semana podr√≠a necesitar ajustes para mantener el equilibrio. Si crees que hay que cambiar el plan para los d√≠as siguientes, a√±ade una secci√≥n al final de tu respuesta llamada `### üîÑ Sugerencia de Re-planificaci√≥n Semanal` con la nueva estructura para los d√≠as que quedan. Si no hay cambios necesarios, no incluyas esta secci√≥n.
  
    **FORMATO DE RESPUESTA:**
    ### üèãÔ∏è Plan de Entrenamiento para Ma√±ana
    ...
    ### ü•ó Plan de Dieta para Ma√±ana
    ...
    ### üí° Consejo del D√≠a
    ...
    (Opcional)
    ### üîÑ Sugerencia de Re-planificaci√≥n Semanal
    Martes: ...
    Mi√©rcoles: ...
    Jueves: ...
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Error al contactar con la IA para el plan diario: {e}")
        return None

# --- 3. C√ìDIGO PRINCIPAL DE LA APP ---
def main():
    st.set_page_config(page_title="AI.TRAIN-U", layout="wide")
    st.title("ü§ñ AI.TRAIN-U")
    create_usertable()

    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False

    if not st.session_state['logged_in']:
        st.image("https://mir-s3-cdn-cf.behance.net/project_modules/fs/218fc872735831.5bf1e45999c40.gif")
        st.sidebar.header("Login")
        username_input = st.sidebar.text_input("Usuario")
        password_input = st.sidebar.text_input("Contrase√±a", type='password')
        if st.sidebar.button("Login"):
            hashed_pswd = make_hashes(password_input)
            result = login_user(username_input, hashed_pswd)
            if result:
                st.session_state['logged_in'] = True
                st.session_state['username'] = username_input
                st.rerun()
            else:
                st.sidebar.error("Usuario o contrase√±a incorrecta")
        st.info("Por favor, introduce tus credenciales en la barra lateral para continuar.")
    
    else:
        # --- APLICACI√ìN PRINCIPAL (SI EL LOGIN ES CORRECTO) ---
        username = st.session_state['username']
        
        st.sidebar.success(f"Conectado como: **{username}**")
        if st.sidebar.button("Logout"):
            del st.session_state['logged_in']
            del st.session_state['username']
            st.rerun()

        creds_dict = st.secrets["gcp_service_account"]
        scopes = ["https.www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        gspread_client = gspread.authorize(creds)
        genai.configure(api_key=st.secrets["GEMINI_API_KEY"])

        perfil_usuario = cargar_perfil(gspread_client, username)
        historial_df = cargar_historial(gspread_client, username)
        
        # --- Muestra el plan reci√©n generado si existe ---
        if 'plan_recien_generado' in st.session_state:
            st.header("üöÄ Tu Plan Detallado para el Primer D√≠a")
            st.markdown(st.session_state['plan_recien_generado'])
            del st.session_state['plan_recien_generado'] # Lo borramos para que no vuelva a salir

        # --- SECCI√ìN DEL PANEL SEMANAL ---
        st.header("üóìÔ∏è Tu Hoja de Ruta Semanal")
        plan_semana_actual = cargar_plan_semana(gspread_client, username)
        
        if not plan_semana_actual:
            st.info("A√∫n no tienes un plan para esta semana.")
            if st.button("üí™ ¬°Generar mi plan para la semana!"):
                with st.spinner("Generando tu plan estrat√©gico y el plan detallado para el Lunes..."):
                    historial_mes_str = historial_df.tail(30).to_string()
                    plan_semanal_generado_str = generar_plan_semanal(perfil_usuario, historial_mes_str)

                    if plan_semanal_generado_str:
                        guardar_plan_semanal_nuevo(gspread_client, username, plan_semanal_generado_str)
                        st.success("¬°Estructura semanal guardada!")
                        
                        datos_ficticios_domingo = {"entreno": "Descanso", "sensaciones": "Listo para empezar la semana"}
                        plan_recien_creado = cargar_plan_semana(gspread_client, username)
                        
                        if plan_recien_creado: # Comprobamos que se ha cargado bien
                            plan_detallado_lunes = generar_plan_diario(perfil_usuario, historial_mes_str, datos_ficticios_domingo, plan_recien_creado)

                            if plan_detallado_lunes:
                                st.session_state['plan_recien_generado'] = plan_detallado_lunes
                                
                                # ¬°L√çNEA CORREGIDA!
                                plan_del_lunes = plan_recien_creado.get("Lunes_Plan", "No definido")
                                actualizar_plan_completo(gspread_client, username, "Lunes", plan_del_lunes, "‚úÖ Planificado")

                                st.success("¬°Plan para Lunes generado! Recargando...")
                                time.sleep(3)
                                st.rerun()
        else:
            st.subheader("Plan Actualizado de la Semana")
            dias = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
            plan_data = { "D√≠a": dias, "Plan": [plan_semana_actual.get(f"{dia}_Plan", "-") for dia in dias], "Estado": [plan_semana_actual.get(f"{dia}_Estado", "-") for dia in dias] }
            st.table(pd.DataFrame(plan_data).set_index("D√≠a"))
            with st.expander("Ver Plan Original de la Semana"):
                st.text(plan_semana_actual.get("Plan_Original_Completo", "No disponible."))

        st.divider()

        # --- SECCI√ìN DE REGISTRO DIARIO ---
        if "Error" in perfil_usuario:
            st.error(perfil_usuario["Error"])
        else:
            with st.expander("Ver mi Perfil y Historial Completo"):
                st.subheader("Mi Perfil")
                st.write(perfil_usuario)
                st.subheader("Historial de Registros")
                st.dataframe(historial_df)
            
            st.header(f"‚úçÔ∏è Registro del D√≠a")
            with st.form("registro_diario_form"):
                entreno = st.text_area("¬øQu√© entrenamiento has hecho hoy?")
                sensaciones = st.text_area("¬øC√≥mo te sientes?")
                calorias = st.number_input("Calor√≠as consumidas (aprox.)", min_value=0, step=100)
                proteinas = st.number_input("Prote√≠nas consumidas (g)", min_value=0, step=10)
                descanso = st.slider("¬øCu√°ntas horas has dormido?", 0.0, 12.0, 8.0, 0.5)
                submitted = st.form_submit_button("‚úÖ Generar plan para ma√±ana")

            if submitted:
                if not plan_semana_actual:
                    st.error("Primero debes generar un plan semanal antes de registrar tu d√≠a.")
                else:
                    with st.spinner("Analizando tu d√≠a y preparando el plan de ma√±ana..."):
                        datos_de_hoy = {"entreno": entreno, "sensaciones": sensaciones, "calorias": calorias, "proteinas": proteinas, "descanso": descanso}
                        historial_texto = historial_df.tail(3).to_string()
                        
                        plan_generado = generar_plan_diario(perfil_usuario, historial_texto, datos_de_hoy, plan_semana_actual)

                        if plan_generado:
                            partes_plan = plan_generado.split("### üîÑ Sugerencia de Re-planificaci√≥n Semanal")
                            plan_diario_detallado = partes_plan[0].strip()

                            nueva_fila_datos = [datetime.now().strftime('%Y-%m-%d'), calorias, proteinas, entreno, sensaciones, descanso, plan_diario_detallado]
                            guardar_registro(gspread_client, username, nueva_fila_datos)

                            dias_semana = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
                            dia_hoy_nombre = dias_semana[(datetime.today().weekday())]
                            
                            # ¬°USAMOS LA FUNCI√ìN CORRECTA!
                            actualizar_plan_completo(gspread_client, username, dia_hoy_nombre, entreno, "‚úÖ Realizado")
        
                            if len(partes_plan) > 1:
                                st.info("¬°La IA ha re-planificado el resto de tu semana!")
                                # L√≥gica futura para actualizar el resto de la semana...
                            
                            st.success("¬°Plan para ma√±ana generado y semana actualizada!")
                            st.markdown(plan_diario_detallado)
                            st.info("Actualizando la tabla...")
                            time.sleep(3)
                            st.rerun()

if __name__ == '__main__':
    main()
